
use std::fs::File;
use std::io::Write;

use dependency::Dependency;
use error::MyMakeError;
#[allow(dead_code)]
pub struct MmkGenerator
{
    filename: File,
    dependency: Dependency,
    output_directory: std::path::PathBuf,
}

impl MmkGenerator
{
    pub fn new(dependency: &Dependency, build_directory: std::path::PathBuf) -> Result<MmkGenerator, MyMakeError>
    {
        let output_directory = dependency.path.parent().unwrap().join(&build_directory);
        match std::fs::create_dir(&output_directory){
            Ok(()) => (),
            Err(err) => return Err(MyMakeError::from(format!("Error creating {:?}: {}", output_directory, err))),
        };
        let filename = File::create(&output_directory
                                        .join("makefile"))
                                        .expect("Something went wrong");
        Ok(MmkGenerator{ filename: filename, dependency: dependency.clone(), output_directory: output_directory})
    }
}

pub trait Generator
{      
    fn generate_makefile(self: &mut Self)        -> std::io::Result<()>;
    fn generate_header(self: &mut Self)          -> std::io::Result<()>;
    fn generate_rule_executable(self: &mut Self) -> std::io::Result<()>;
    fn generate_rule_package(self: &mut Self)    -> std::io::Result<()>;
    fn print_ok(self: &Self)                     -> ();    
}

impl Generator for MmkGenerator
{
    fn generate_makefile(self: &mut Self) -> std::io::Result<()>
    {
        self.generate_header()?;
        if self.dependency.mmk_data.data.contains_key("MMK_EXECUTABLE")
        {
            self.generate_rule_executable()?;
        }
        else
        {
            self.generate_rule_package()?;
        }
        self.print_ok();
        Ok(())
    }

    fn generate_header(self: &mut Self) -> std::io::Result<()>
    {
        self.filename.write(b"\
        # Generated by MmkGenerator.generate_header(). DO NOT EDIT THIS FILE.\n\
        \n\
        # ----- INCLUDES -----\n\
        include /home/fredrik/bin/mymake/include/strict.mk\n\
        \n\
        # ----- DEFINITIONS -----\n\
        AR       := $(AR.static)        # We generate only static static libraries.\n\
        CC       := /usr/bin/gcc -x c++ # GCC is the default compiler.\n\
        CP       := /usr/bin/cp  \n\
        CP_FORCE := -f \n\
        # ----- DEFAULT PHONIES -----\n\
        \n\
        .SUFFIXES:         # We do not use suffixes on makefiles.\n\
        .PHONY: all\n\
        .PHONY: package\n\
        .PHONY: install\n\
        .PHONY: uninstall\n\
        .PHONY: clean\n")?;
        Ok(())
    }


    fn generate_rule_package(self: &mut Self) -> std::io::Result<()>
    {
        let data = format!("\n\
        #Generated by MmkGenerator.generate_rule_package(). \n\
        .PHONY: package\n\
        package: {sources} {headers}\n\
        \t$(strip $(CC) $(CXXFLAGS) $(CPPFLAGS) $(WARNINGS) {dependencies} -c $^)\n\
        ", sources      = self.dependency.mmk_data.to_string("MMK_SOURCES")
         , headers      = self.dependency.mmk_data.to_string("MMK_HEADERS")
        ,  dependencies = self.dependency.mmk_data.to_string("MMK_DEPEND"));
        
        self.filename.write(data.as_bytes())?;
        Ok(())
    }

    fn generate_rule_executable(self: &mut Self) -> std::io::Result<()>
    {
        let data = format!("\n\
        #Generated by MmkGenerator.generate_rule_executable(). \n\
        .PHONY: {executable}\n\
        {executable}: {sources} {headers}\n\
        \t$(strip $(CC) $(CXXFLAGS) $(CPPFLAGS) $(WARNINGS) {dependencies} $^ -o $@)\n\
        ",
        executable   = self.dependency.mmk_data.to_string("MMK_EXECUTABLE"),
        sources      = self.dependency.mmk_data.to_string("MMK_SOURCES"),
        headers      = self.dependency.mmk_data.to_string("MMK_HEADERS"),
        dependencies = self.dependency.mmk_data.to_string("MMK_DEPEND"));
        
        self.filename.write(data.as_bytes())?;
        Ok(())
    }
    fn print_ok(self: &Self) -> ()
    {
        print!(".");
    }
}

#[cfg(test)]
mod tests {
    use super::*;
    use std::fs;
    use tempdir::TempDir;

    #[test]
    fn test_generate_makefile() -> std::io::Result<()>
    {
        let dir = TempDir::new("example")?;
        let output_dir = std::path::PathBuf::from(".build");
        let mut dependency = Dependency::from(&dir.path());
        dependency.mmk_data.data.insert("MMK_SOURCES".to_string(), vec!["filename.cpp".to_string(), "ofilename.cpp".to_string()]);
        dependency.mmk_data.data.insert("MMK_EXECUTABLE".to_string(), vec!["main".to_string()]);
        let mut gen = MmkGenerator::new(dependency, output_dir).unwrap();
        assert!(Generator::generate_makefile(&mut gen).is_ok());
        Ok(())
    }
    #[test]
    fn test_generate_header() -> std::io::Result<()>
    {
        let dir = TempDir::new("example")?;
        let output_dir = std::path::PathBuf::from(".build");
        let mut dependency = Dependency::from(&dir.path());
        dependency.mmk_data.data.insert("MMK_SOURCES".to_string(), vec!["filename.cpp".to_string(), "ofilename.cpp".to_string()]);
        dependency.mmk_data.data.insert("MMK_EXECUTABLE".to_string(), vec!["main".to_string()]);
        let mut gen = MmkGenerator::new(dependency, output_dir).unwrap();
        let test_file = gen.output_directory.join("makefile");
        assert!(Generator::generate_header(&mut gen).is_ok());
        assert_eq!("\
        # Generated by MmkGenerator.generate_header(). DO NOT EDIT THIS FILE.\n\
        \n\
        # ----- INCLUDES -----\n\
        include /home/fredrik/bin/mymake/include/strict.mk\n\
        \n\
        # ----- DEFINITIONS -----\n\
        AR       := $(AR.static)        # We generate only static static libraries.\n\
        CC       := /usr/bin/gcc -x c++ # GCC is the default compiler.\n\
        CP       := /usr/bin/cp  \n\
        CP_FORCE := -f \n\
        # ----- DEFAULT PHONIES -----\n\
        \n\
        .SUFFIXES:         # We do not use suffixes on makefiles.\n\
        .PHONY: all\n\
        .PHONY: package\n\
        .PHONY: install\n\
        .PHONY: uninstall\n\
        .PHONY: clean\n", fs::read_to_string(test_file.to_str().unwrap()).unwrap());
        Ok(())
    }
    #[test]
    fn test_generate_package() -> std::io::Result<()>
    {
        let dir = TempDir::new("example")?;
        let output_dir = std::path::PathBuf::from(".build");
        let mut dependency = Dependency::from(&dir.path());
        dependency.mmk_data.data.insert("MMK_SOURCES".to_string(), vec!["filename.cpp".to_string(), "ofilename.cpp".to_string()]);
        dependency.mmk_data.data.insert("MMK_HEADERS".to_string(), vec!["filename.h".to_string(), "ofilename.h".to_string()]);
        dependency.mmk_data.data.insert("MMK_DEPEND".to_string(), vec!["/some/dependency".to_string(), "/some/new/dependency".to_string()]);
        let mut gen = MmkGenerator::new(dependency, output_dir).unwrap();
        let test_file = gen.output_directory.join("makefile");
        assert!(Generator::generate_rule_package(&mut gen).is_ok());
        assert_eq!("\
        \n\
        #Generated by MmkGenerator.generate_rule_package(). \n\
        .PHONY: package\n\
        package: filename.cpp ofilename.cpp filename.h ofilename.h\n\
        \t$(strip $(CC) $(CXXFLAGS) $(CPPFLAGS) $(WARNINGS) -I/some/dependency -I/some/new/dependency -c $^)\n\
        ", fs::read_to_string(test_file.to_str().unwrap()).unwrap());
        Ok(())
    }

    #[test]
    fn test_generate_executable() -> std::io::Result<()>
    {
        let dir = TempDir::new("example")?;
        let output_dir = std::path::PathBuf::from(".build");
        let mut dependency = Dependency::from(&dir.path());
        dependency.mmk_data.data.insert("MMK_SOURCES".to_string(), vec!["filename.cpp".to_string(), "ofilename.cpp".to_string()]);
        dependency.mmk_data.data.insert("MMK_EXECUTABLE".to_string(), vec!["x".to_string()]);
        dependency.mmk_data.data.insert("MMK_DEPEND".to_string(), vec!["/some/dependency".to_string(), "/some/new/dependency".to_string()]);
        let mut gen = MmkGenerator::new(dependency, output_dir).unwrap();
        let test_file = gen.output_directory.join("makefile");
        assert!(Generator::generate_rule_executable(&mut gen).is_ok());
        assert_eq!("\n\
        #Generated by MmkGenerator.generate_rule_executable(). \n\
        .PHONY: x\n\
        x: filename.cpp ofilename.cpp \n\
        \t$(strip $(CC) $(CXXFLAGS) $(CPPFLAGS) $(WARNINGS) -I/some/dependency -I/some/new/dependency $^ -o $@)\n\
        ", fs::read_to_string(test_file.to_str().unwrap()).unwrap());
        Ok(())
    }
}

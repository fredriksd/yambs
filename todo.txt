TODO: 
    Reproduserbarhet: Lag en typ 'remake'-kommando. Må først legge inn invokert kommando i mymake_log.
    *Dokumentasjon: * Finn ut hvordan en skriver README-filer for GitHub (hint: Jeg tror det er Markdown.)
                    * Dokumentér hva MyMake er for noe og hva hensikten med det er
                    * Er det noe formål for hvorfor MyMake ble laget (se på CMake / makefile som inspirasjon.)?
                       * CMake forfølger flere ulike C/C++ - standarder og forsøker å "fortone" seg med alle.
                       * Dette har sine klare ulemper og har ført til det relativt komplekse systemet CMake er.
                       * MyMake går i en annen retning; MyMake skal følge én standard og kun det: MyMake setter standarden.
                       * Mengden med konfigurasjoner en må gjøre for å få et godt produksjons- og utviklingsmiljø med CMake er unødvendig vanskelig.
                       * Med MyMake skal dette komme "out of the box".
                       * Minst mulig med "boilerplate" - kode.
                    * Syntaks for MyMake 
                       * Hvert MyMake - keyword og hva disse gjør.
                    * Filosofi om bruk (kommandolinjebasert i stedet for konfigurasjonsfiler slik CMake er lagt opp.)
                  
                    * Directed Acyclic Graph generation (Dependency Generation).
                    * Foreslått mappestruktur og arbeidsflyt.
                    
    *Builder: *Generere dependency graph. Finne ut hva som skal bygges i riktig rekkefølge
              *Refakturere testene i Builder.
    * Første inkrement: Ha kun én dependency som trengs for å vise konsept.
    *Implementere unwrap_or_terminate() for Option / Result
    *
    * External: Legg til tester for external - innhold.
    *
    * Lag MyMake Utility-fil for filsystem (create_dir og create_file)
    * Keyboard interrupt: Ved avbrudd av bygg (i form av f.eks Ctrl-C), burde bygget eller andre MyMake-prosesser stoppes på riktig måte.
    *Mmk_parser: Vurder å legge tilbake MMK_LIBRARY_LABEL for å kunne ha ulike library navn.
    *            Legg inn validering på filnavn og extension. Tillatte navn skal være 
                 "lib.mmk" og "run.mmk"             
    *Generator::new tar inn path i stedet for filnavn. Automatisk skal output bli en makefile.
    *Generator::new: er det mulig å skrive om denne funksjonen slik at Dependency er med fra starten, og ikke som Option?
    *           Toolchain: Utrede hvordan MyMake skal finne informasjon om toolchain til sluttbruker.
    *                      En liste med predefinerte pather blir søkt gjennom av MyMake til å finne de ulike nødvendige programmene
    *                      (gcc, clang, AR...).
    *                      Forslag: Nøkkelord etterfulgt av lokaliseringssti som leses av MyMake før kjøring?
                                    Evt. la dette gå gjennom en JSON-fil.
                                    Evt bruk minimal syntaks for tilordning:
                                       compiler=<path/til/compiler{gcc, clang, msvc}
                                       linker=<path/til/linker>
                                    La fila hete "toolchain.txt"
                           Utred hva som må settes opp av bruker.
                           Les opp om linker, AR og lignende.

    *            Include: Generatoren lager include - filene som trengs til byggene. Da slippes det å lages spesifikke mapper for dette
    *                     til sluttbrukeren.
    *                     include-filene til et prosjekt skal legges i /file/to/project/.build/include/
    *                     include-filene skal ligges i /file/to/project/.build/mymake_include/
    *                     Det lages for mange make-includes av MyMake. Det bør kanskje kun være make-includes fra toppen i stedet for rekursivt nedover?
    *            Out of tree build: MyMake skal bygge basert på out of tree build. Dette fungerer foreløpig for enkeltprosjekt (16.05.2021)
    *                               Ved aggregering av tredjepart / pakker, skal det opprettes en lib/ - katalog under build-mappa.
    *                               Her ligger aggregert generat under hver sin mappe med prosjektnavn.
    *                               Tredje part skal kalles i .mmk på følgende måte:
    *                               MMK_REQUIRE:
    *                                  /some/directory/to/mmk/file
    * Defines.mk:
         - Makefile som inneholder ulike definisjoner?
         - Muligheten for å definere CC, CC_COMPILER_IS_CLANG, CC_COMPILER_IS_GCC, AR, LD, MKDIR, MV, CP, med mer.
         

    * Overall: * Endre alle Error - meldinger som er relevant til å ta MyMakeError for Result.
    *          * Ordne bedre feilhåndtering for mmk_parser. Feilhåndteringen der baserer seg
    *            foreløpig på utviklerens feil og ikke brukerens feil. Feil skal oppdages fra
    *            brukeren sin side.
    *         * Dekke case der tre dependencies eksisterer: A avhenger av B, og C avhenger av B. Får alle samme B?

    * Lag struct CommandLine som håndterer argumentene inn til MyMake. Bruk den til å passere ting videre til de riktige structene."

    * Ha støtte for sanitizere. Burde muligens være støtte for riktig bruk også. Ordne testdekning for dette.
    * Les opp på sanitizere og hvordan støtten er for de ulike kompilatorene. Tenk kun på GCC i starten.
    * Ha støtte for "configure" - funksjonalitet
      - MyMake genererer toolchain.mmk under mymake/ i prosjektet. MyMake leter under typiske områder hvor kompilatorer er installert, inkludert miljøvariabler.
      - MyMake skal finne alle kompilatorer som passer for det OS det finner.
      - MyMake må dermed først kjøres med "configure" dersom det ikke finns noe mymake/toolchain.mmk i prosjektet eller i byggemappa før det kan bygge.
      - Ved flere funn av kompilatorer må brukene spesifisere hvilken kompilator som skal brukes ved bygget: mymake -g <path/to/mymake/recipe> -c <compiler>
    * Ha støtte for en "build-project / build-all" - funksjonalitet? 
      - Hvis et prosjekt har flere varianter av tester (compile time test, unit test, fuzz tests), er det fint å kunne bygge alle disse, slik som en bygger alle targets i make.
      - Semantisk krever MyMake at hver run.mmk skal ligge i sine separate mapper, så mymake må kunne lete opp alle run.mmk - filer og bygge disse.
    
    * Error:
         Forbedre MyMakeError - structen:
            * Implementere std::error::Error - traiten
            * Vurdere å legge til ekstra felt i MyMakeError som beskriver hvilken type feilmelding det er (enum ErrorKind)
               ErrorKind:
                 - CompileTime
                 - ConfigureTime
                 - ParseError
                 ...

   * Custom System Message structure
      - Error messages should reflect which part of the MyMake process that failed.
